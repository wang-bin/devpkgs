name: Build No LTO

on:
  push:
  schedule:
      - cron: '0 6 * * 2'

env:
  NINJA_STATUS: '[%f/%t %e %r]'
  LLVM_VER: ${{ vars.LLVM_VER }}
  VC_LTL_VER: ${{ vars.VC_LTL_VER }}
  OPTIONS: -DMIN_SIZE=1 -DWITH_LTO=0 -DCMAKE_VERBOSE_MAKEFILE=1 -GNinja
  OPTIONS0: -DBUILD_LIBASS=0 -DBUILD_HB=0
  OPTIONS1: -DBUILD_LIBASS=1 -DBUILD_FT=0 -DBUILD_HB=1 -DBUILD_HB_FT=1
jobs:
  macOS:
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: macos-15
    env:
      TARGET_OS: 'macOS'
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-tags: true
        fetch-depth: 0
    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_${{ vars.XCODE }}.app
    - name: Create Build Environment
      shell: bash
      run: |
        brew install ninja nasm
        brew uninstall --ignore-dependencies harfbuzz
    - name: Build for x86_64 # native build first
      env:
        ARCH: x86_64
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DFRIBIDI_GENTAB=1 -DBUILD_WOLFSSL=0 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_OSX_ARCHITECTURES=${{ env.ARCH }} -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DBUILD_WOLFSSL=0 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_OSX_ARCHITECTURES=${{ env.ARCH }} -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
    - name: Build for arm64
      env:
        ARCH: arm64
      shell: bash
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DBUILD_WOLFSSL=0 -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 -DCMAKE_OSX_ARCHITECTURES=${{ env.ARCH }} -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DBUILD_WOLFSSL=0 -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 -DCMAKE_OSX_ARCHITECTURES=${{ env.ARCH }} -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
    - name: Make SDK
      shell: bash
      run: |
        mkdir -p install/lib
        for d in libass.dylib libdav1d.dylib libsnappy.a libglfw3.a libfreetype.a libfribidi.a libharfbuzz.a libshaderc_loader.a; do
            lipo -create install/{arm64,x86_64}/lib/$d -o install/lib/$d
        done
        strip -u -r install/lib/*.dylib
        ln -sf libglfw3.a install/lib/libglfw.a
        rm -rf install/lib/{x86_64,arm64}
        tar Jcvf devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}.tar.xz install
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}*.tar.xz


  iOS:
    runs-on: macos-15
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
        os: [iOS, tvOS, visionOS]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-tags: true
        fetch-depth: 0
    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_${{ vars.XCODE }}.app
    - name: Create Build Environment
      shell: bash
      run: brew install ninja nasm
    - name: Build host gen_tab # native build first
      shell: bash
      run: |
        cmake -DFRIBIDI_GENTAB=1 -Bbuild/host -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        cmake --build build/host -t gen_tab
    - name: Build for arm64
      env:
        ARCH: arm64
      shell: bash
      run: |
        minver=8.0
        [[ "${{ matrix.os }}" == "tv"* ]] && minver=9.0
        [[ "${{ matrix.os }}" == "vision"* ]] && minver=1.0
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DWITH_DEB_INFO=0 -DBUILD_WOLFSSL=1 -DHB_IOS=1 -DCMAKE_IOS_INSTALL_COMBINED=YES -DCMAKE_SYSTEM_NAME=${{ matrix.os }} -DCMAKE_OSX_DEPLOYMENT_TARGET=${minver} -DCMAKE_OSX_ARCHITECTURES=${{ env.ARCH }} -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DWITH_DEB_INFO=0 -DBUILD_WOLFSSL=1 -DHB_IOS=1 -DCMAKE_IOS_INSTALL_COMBINED=YES -DCMAKE_SYSTEM_NAME=${{ matrix.os }} -DCMAKE_OSX_DEPLOYMENT_TARGET=${minver} -DCMAKE_OSX_ARCHITECTURES=${{ env.ARCH }} -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
    - name: Make SDK
      shell: bash
      run: |
        for d in $(find install/arm64/lib -name "*.framework" |xargs); do
            strip -u -r "$d"/*
        done
        tar Jcvf devpkgs-${{ matrix.os }}-${{ matrix.config }}.tar.xz install
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: devpkgs-${{ matrix.os }}-${{ matrix.config }}
        path: devpkgs-${{ matrix.os }}-${{ matrix.config }}.tar.xz


  Windows_VS2022:
    runs-on: windows-2022
    env:
      TARGET_OS: windows-desktop
    strategy:
      fail-fast: false
      matrix:
        config: [Release,Debug] # FIXME: x86 build blocked if with debug info
        dll: [1,0] # for debug static libs
        exclude:
          - config: Release
            dll: 0
          - config: Debug
            dll: 1
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-tags: true
        fetch-depth: 0
    - name: Get libva
      shell: bash
      run: |
        curl -kL -o va.nupkg https://www.nuget.org/api/v2/package/Microsoft.Direct3D.VideoAccelerationCompatibilityPack
        7z x va.nupkg -odep
        mv dep/build/native/x64/include dep
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/setup-nasm@v1
    - name: Use MSVC x64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    - name: Build for win x64
      env:
        ARCH: x64
      run: |
        clang-cl --version
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DBUILD_WOLFSSL=0 -DBUILD_VALD=${{ matrix.dll }} -DBUILD_DAV1D=${{ matrix.dll }} -DFRIBIDI_GENTAB=1  -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_VERSION="6.0"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DBUILD_FT=0 -DBUILD_HB=1 -DBUILD_HB_FT=1 -DBUILD_WOLFSSL=0 -DBUILD_VALD=${{ matrix.dll }} -DBUILD_LIBASS=${{ matrix.dll }} -DBUILD_DAV1D=${{ matrix.dll }} -DFRIBIDI_GENTAB=1  -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_VERSION="6.0"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
    - name: Use MSVC arm64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_arm64
    - name: Build for win arm64
      env:
        ARCH: arm64
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DBUILD_WOLFSSL=0 -DBUILD_VALD=${{ matrix.dll }} -DBUILD_DAV1D=${{ matrix.dll }} -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_VERSION="10.0" -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }}  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DBUILD_WOLFSSL=0 -DBUILD_VALD=${{ matrix.dll }} -DBUILD_LIBASS=${{ matrix.dll }} -DBUILD_DAV1D=${{ matrix.dll }} -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_VERSION="10.0" -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }}  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
    - name: Use MSVC x86
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86
    - name: Build for win x86
      env:
        ARCH: x86
      # dav1d: win7 required(atomic, GetThreadGroupAffinity)
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DBUILD_WOLFSSL=0 -DBUILD_VALD=${{ matrix.dll }} -DBUILD_DAV1D=${{ matrix.dll }} -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_VERSION="6.1"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DBUILD_WOLFSSL=0 -DBUILD_VALD=${{ matrix.dll }} -DBUILD_LIBASS=${{ matrix.dll }} -DBUILD_DAV1D=${{ matrix.dll }} -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_VERSION="6.1"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
    - name: Make SDK
      shell: bash
      run: |
        mkdir -p install/include
        cp -avf dep/include/va install/include/
        7z a  -ssc -m0=lzma2 -mx=9 -ms=on -mf=off devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}-vs2022.7z install
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: devpkgs-vs2022-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}-vs2022*.7z


  Windows_VS2022_LTL:
    runs-on: windows-2022
    env:
      TARGET_OS: windows-desktop
    strategy:
      fail-fast: false
      matrix:
        config: [Release]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-tags: true
        fetch-depth: 0
    - name: 'Restore dep cache'
      id: dep-cache
      uses: actions/cache@v4
      with:
        path: VC-LTL
        key: dep-${{ vars.VC_LTL_VER }}
    - if: ${{ steps.dep-cache.outputs.cache-hit != 'true' }}
      name: Get VC-LTL
      shell: bash
      run: |
        curl -kL -o ltl.7z https://github.com/Chuyu-Team/VC-LTL5/releases/download/v${VC_LTL_VER}/VC-LTL-${VC_LTL_VER}-Binary.7z
        7z x ltl.7z -oVC-LTL
    - name: Get libva
      shell: bash
      run: |
        curl -kL -o va.nupkg https://www.nuget.org/api/v2/package/Microsoft.Direct3D.VideoAccelerationCompatibilityPack
        7z x va.nupkg -odep
        mv dep/build/native/x64/include dep
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/setup-nasm@v1
    - name: Use NSVC x64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    - name: Build for win x64
      env:
        ARCH: x64
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DFRIBIDI_GENTAB=1 -DBUILD_WOLFSSL=0 -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DWITH_VC_LTL=1 -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_VERSION="6.0"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DFRIBIDI_GENTAB=1 -DBUILD_WOLFSSL=0 -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DWITH_VC_LTL=1 -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_VERSION="6.0"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
    - name: Use MSVC x86
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86
    - name: Build for win x86
      env:
        ARCH: x86
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DBUILD_WOLFSSL=0 -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DWITH_VC_LTL=1 -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_VERSION="6.1"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DBUILD_WOLFSSL=0 -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DWITH_VC_LTL=1 -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_VERSION="6.1"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
    - name: Make SDK
      shell: bash
      run: 7z a  -ssc -m0=lzma2 -mx=9 -ms=on -mf=off devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}-vs2022-ltl.7z install
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: devpkgs-vs2022-ltl-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}-vs2022-ltl*.7z


  UWP_VS2022:
    runs-on: windows-2022
    env:
      TARGET_OS: uwp
    strategy:
      fail-fast: false
      matrix:
        config: [Release]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-tags: true
        fetch-depth: 0
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/setup-nasm@v1
    - name: Use MSVC x64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    - name: Build for host gen_tab
      run: |
        cmake -DFRIBIDI_GENTAB=1   -Bbuild/host -DCMAKE_BUILD_TYPE=${{ matrix.config }} .
        cmake --build build/host -t gen_tab
    - name: Use MSVC x64 uwp
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        uwp: true
    - name: Build for uwp x64
      env:
        ARCH: x64
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DCMAKE_ASM_NASM_COMPILER="C:/Users/runneradmin/nasm/nasm.exe" ${{ env.OPTIONS0 }} -DBUILD_WOLFSSL=0 -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DCMAKE_ASM_NASM_COMPILER="C:/Users/runneradmin/nasm/nasm.exe" ${{ env.OPTIONS1 }} -DBUILD_WOLFSSL=0 -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        llvm-readobj --needed-libs install/${{ env.ARCH }}/bin/*.dll
    - name: Use MSVC arm64 uwp
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_arm64
        uwp: true
    - name: Build for uwp arm64
      env:
        ARCH: arm64
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DBUILD_WOLFSSL=0 -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DBUILD_WOLFSSL=0 -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        llvm-readobj --needed-libs install/${{ env.ARCH }}/bin/*.dll
    - name: Use MSVC x86 uwp
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86
        uwp: true
    - name: Build for uwp x86
      env:
        ARCH: x86
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DCMAKE_ASM_NASM_COMPILER="C:/Users/runneradmin/nasm/nasm.exe" ${{ env.OPTIONS0 }} -DBUILD_WOLFSSL=0 -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DCMAKE_ASM_NASM_COMPILER="C:/Users/runneradmin/nasm/nasm.exe" ${{ env.OPTIONS1 }} -DBUILD_WOLFSSL=0 -DCMAKE_SYSTEM_PROCESSOR=${{ env.ARCH }} -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0"  -Bbuild/${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${{ env.ARCH }} .
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        llvm-readobj --needed-libs install/${{ env.ARCH }}/bin/*.dll
    - name: Make SDK
      shell: bash
      run: 7z a  -ssc -m0=lzma2 -mx=9 -ms=on -mf=off devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}-vs2022.7z install
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: devpkgs-vs2022-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}-vs2022.7z

  MinGW_GCC:
    runs-on: ubuntu-latest
    env:
      TARGET_OS: mingw
      ASM_NASM: /usr/bin/nasm
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-tags: true
        fetch-depth: 0
    - uses: ./.github/actions/install-llvm
      with:
        version: ${{ vars.LLVM_VER }}
    - name: Create Build Environment
      shell: bash
      run: sudo apt install -y cmake ninja-build nasm g++-mingw-w64
    - name: Build host gen_tab # native build first
      shell: bash
      run: |
        cmake -DFRIBIDI_GENTAB=1 -Bbuild/host -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        cmake --build build/host -t gen_tab
    - name: Build for x64
      env:
        ARCH: x64
      shell: bash
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DBUILD_WOLFSSL=0 -DUSE_LIBCXX=0 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/llvm-mingw.cmake -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DBUILD_WOLFSSL=0 -DUSE_LIBCXX=0 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/llvm-mingw.cmake -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
    - name: Build for x86
      env:
        ARCH: x86
      shell: bash
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DBUILD_DAV1D=0 -DBUILD_WOLFSSL=0 -DUSE_LIBCXX=0 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/llvm-mingw.cmake -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DBUILD_DAV1D=0 -DBUILD_WOLFSSL=0 -DUSE_LIBCXX=0 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/llvm-mingw.cmake -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
    - name: Make SDK
      shell: bash
      run: 7z a -ssc -m0=lzma2 -mx=9 -ms=on -mf=off devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}.7z install
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}.7z

  Linux_libcxx:
    runs-on: ubuntu-latest
    env:
      TARGET_OS: linux
      ASM_NASM: /usr/bin/nasm # for cross build?
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-tags: true
        fetch-depth: 0
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v4
      with:
        path: ./sysroot
        key: sysroot-${{ env.TARGET_OS }}-${{ secrets.LINUX_SYSROOT_ID }}
    - uses: ./.github/actions/install-llvm
      with:
        version: ${{ vars.LLVM_VER }}
    - name: Create Build Environment
      shell: bash
      env:
         SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
      run: |
        if [[ "$SYSROOT_CACHE_HIT" != "true" ]]; then
          wget https://sourceforge.net/projects/avbuild/files/${TARGET_OS}/${TARGET_OS/r*pi/rpi}-sysroot.tar.xz/download -O sysroot.tar.xz
          tar Jxf sysroot.tar.xz
        fi
        sudo apt install -y cmake ninja-build nasm libva-dev libvdpau-dev
    - name: Build host gen_tab # native build first
      shell: bash
      run: |
        cmake -DFRIBIDI_GENTAB=1 -Bbuild/host -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        cmake --build build/host -t gen_tab
    - name: Build for x64
      env:
        ARCH: amd64
      shell: bash
      run: |
        cmake ${{ env.OPTIONS }} -DWITH_DEB_INFO=0 -DBUILD_WOLFSSL=1 -DBUILD_LIBASS=0 -DUSE_LIBCXX=1 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/linux.clang.cmake -DLINUX_SYSROOT=$PWD/sysroot -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        llvm-strip-${LLVM_VER} install/${{ env.ARCH }}/lib/*.so.*.*.*
    - name: Build for arm64
      env:
        ARCH: arm64
      shell: bash
      run: |
        cmake ${{ env.OPTIONS }} -DWITH_DEB_INFO=0 -DBUILD_WOLFSSL=1 -DBUILD_LIBASS=0 -DUSE_LIBCXX=1 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/linux.clang.cmake -DLINUX_SYSROOT=$PWD/sysroot -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        llvm-strip-${LLVM_VER} install/${{ env.ARCH }}/lib/*.so.*.*.*
    - name: Build for armhf
      env:
        ARCH: armhf
      shell: bash
      run: |
        cmake ${{ env.OPTIONS }} -DBUILD_WOLFSSL=1 -DBUILD_LIBASS=0 -DUSE_LIBCXX=1 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/linux.clang.cmake -DLINUX_SYSROOT=$PWD/sysroot -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        llvm-strip-${LLVM_VER} install/${{ env.ARCH }}/lib/*.so.*.*.*
    - name: Make SDK
      shell: bash
      run: 7z a  -ssc -m0=lzma2 -mx=9 -ms=on -mf=off devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}.7z install
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}*.7z

  Linux_gnustl:
    runs-on: ubuntu-latest
    env:
      TARGET_OS: linux
      ASM_NASM: /usr/bin/nasm
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-tags: true
        fetch-depth: 0
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v4
      with:
        path: ./sysroot
        key: sysroot-${{ env.TARGET_OS }}-${{ secrets.LINUX_SYSROOT_ID }}
    - uses: ./.github/actions/install-llvm
      with:
        version: ${{ vars.LLVM_VER }}
    - name: Create Build Environment
      shell: bash
      env:
         SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
      run: |
        if [[ "$SYSROOT_CACHE_HIT" != "true" ]]; then
          wget https://sourceforge.net/projects/avbuild/files/${TARGET_OS}/${TARGET_OS/r*pi/rpi}-sysroot.tar.xz/download -O sysroot.tar.xz
          tar Jxf sysroot.tar.xz
        fi
        sudo apt install -y cmake ninja-build nasm libva-dev libvdpau-dev
    - name: Build host gen_tab # native build first
      shell: bash
      run: |
        cmake -DFRIBIDI_GENTAB=1 -Bbuild/host -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        cmake --build build/host -t gen_tab
    - name: Build for x64
      env:
        ARCH: amd64
      shell: bash
      run: |
        cmake ${{ env.OPTIONS }} -DWITH_DEB_INFO=0 -DBUILD_WOLFSSL=1 -DBUILD_LIBASS=0 -DUSE_LIBCXX=0 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/linux.clang.cmake -DLINUX_SYSROOT=$PWD/sysroot -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        llvm-strip-${LLVM_VER} install/${{ env.ARCH }}/lib/*.so.*.*.*
    - name: Make SDK
      shell: bash
      run: 7z a -ssc -m0=lzma2 -mx=9 -ms=on -mf=off devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}-gnustl.7z install
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}-gnustl
        path: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}-gnustl.7z

  Android:
    runs-on: macos-latest
    env:
      TARGET_OS: android
      MIN_API: 19
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel] # https://github.com/android/ndk/issues/721
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-tags: true
        fetch-depth: 0
    - name: Create Build Environment
      shell: bash
      run: brew install ninja nasm
    - name: Apply patches
      shell: bash
      run: |
        cd src/libass
        for p in $(find ../../projects/libass/patches -name "*.patch"); do
            echo $p
            patch -p1 -N < $p
        done
    - name: Build host gen_tab # native build first
      shell: bash
      run: |
        cmake -DFRIBIDI_GENTAB=1 -Bbuild/host -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        cmake --build build/host -t gen_tab
    - name: Build for arm64-v8a
      env:
        ARCH: arm64-v8a
      shell: bash
      run: |
        MIN_API_64=21
        [ $MIN_API -gt 21 ] && MIN_API_64=$MIN_API
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DWITH_DEB_INFO=0 -DBUILD_WOLFSSL=1 -DANDROID_LD=lld -DANDROID_ABI=${ARCH} -DANDROID_PLATFORM=android-${MIN_API_64} -DANDROID_TOOLCHAIN=clang -DANDROID_STL=c++_shared -DANDROID_PIE=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DWITH_DEB_INFO=0 -DBUILD_WOLFSSL=1 -DANDROID_LD=lld -DANDROID_ABI=${ARCH} -DANDROID_PLATFORM=android-${MIN_API_64} -DANDROID_TOOLCHAIN=clang -DANDROID_STL=c++_shared -DANDROID_PIE=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        $ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-strip install/${ARCH}/lib/*.so
    - name: Build for armeabi-v7a
      env:
        ARCH: armeabi-v7a
        MIN_API: 21  # 19: android 4.4. ndk25
      shell: bash
      run: |
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS0 }} -DBUILD_WOLFSSL=1 -DANDROID_LD=lld -DANDROID_ABI=${ARCH} -DANDROID_PLATFORM=android-${MIN_API} -DANDROID_TOOLCHAIN=clang -DANDROID_STL=c++_shared -DANDROID_PIE=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        cmake ${{ env.OPTIONS }} ${{ env.OPTIONS1 }} -DBUILD_WOLFSSL=1 -DANDROID_LD=lld -DANDROID_ABI=${ARCH} -DANDROID_PLATFORM=android-${MIN_API} -DANDROID_TOOLCHAIN=clang -DANDROID_STL=c++_shared -DANDROID_PIE=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
        cmake --build build/${{ env.ARCH }}
        cmake --install build/${{ env.ARCH }}
        $ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-strip install/${ARCH}/lib/*.so
#    - name: Build for x86_64 # yasm error
#      env:
#        ARCH: x86_64
#      shell: bash
#      run: |
#        cmake -DCMAKE_ANDROID_NDK_VERSION=25.1 -DANDROID_LD=lld -DANDROID_ABI=${ARCH} -DANDROID_PLATFORM=android-${MIN_API} -DANDROID_TOOLCHAIN=clang -DANDROID_STL=c++_shared -DANDROID_PIE=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -H$PWD -Bbuild/${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install/${ARCH}
#        cmake --build build/${{ env.ARCH }}
#        cmake --install build/${{ env.ARCH }}
#        $ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-strip install/${ARCH}/lib/*.so
    - name: Make SDK
      shell: bash
      run: 7z a  -ssc -m0=lzma2 -mx=9 -ms=on -mf=off devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}.7z install
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: devpkgs-${{ env.TARGET_OS }}-${{ matrix.config }}*.7z


  pkg:
    runs-on: macos-latest
    needs: [iOS, macOS, Android, Windows_VS2022, Windows_VS2022_LTL, UWP_VS2022, Linux_libcxx, Linux_gnustl]
    steps:
    - uses: actions/checkout@v4
    - name: Download iOS libs
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-iOS-MinSizeRel
    - name: Download tvOS libs
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-tvOS-MinSizeRel
    - name: Download visionOS libs
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-visionOS-MinSizeRel
    - name: Download macOS libs
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-macOS-MinSizeRel
    - name: Download win32 MD release libs
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-vs2022-windows-desktop-Release
    - name: Download win32 MD debug libs
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-vs2022-windows-desktop-Debug
    - name: Download win32 ltl MT release libs
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-vs2022-ltl-windows-desktop-Release
    - name: Download uwp MD release libs
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-vs2022-uwp-Release
    - name: Download linux libcxx libs      # for libmdk
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-linux-MinSizeRel
    - name: Download android libs
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-android-MinSizeRel
    - name: Download linux gnustl libs      # for avbuild
      uses: actions/download-artifact@v4
      with:
        name: devpkgs-linux-MinSizeRel-gnustl
    - name: Make libmdk dep
      run: |
        brew install shaderc
        chmod +x mkpkg.sh
        ./mkpkg.sh
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: libmdk-dep
        path: dep*.7z
